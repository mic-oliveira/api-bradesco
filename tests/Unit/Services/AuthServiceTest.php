<?php


namespace Tests\Unit\Services;


use BlastCloud\Guzzler\UsesGuzzler;
use Bradesco\Models\Signature;
use Bradesco\Services\AuthService;
use Bradesco\Services\SignatureService;
use Carbon\Carbon;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;

class AuthServiceTest extends TestCase
{
    use UsesGuzzler;

    private AuthService $service;
    private Signature $signature;
    private FilesystemAdapter $cache;

    protected function setUp(): void
    {
        parent::setUp();
        $client = $this->guzzler->getClient(['base_uri' => "https://proxy.api.prebanco.com.br/"]);
        $this->cache = new FilesystemAdapter();
        $this->service = new AuthService($this->cache);
        $this->service->setClient($client);

        $this->signature = new Signature();
        $this->signature->setVerb('POST');
        $this->signature->setUri('/v1.1/jwt-service');
        $this->signature->setAgency(111111);
        $this->signature->setAccount(5122);
        $this->signature->setAlgorithm('SHA256');
        $this->signature->setBody(['teste' => 'valor']);
        $this->signature->setAccessToken('eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.ew0KICJ2ZXIiOiAiMS4wIiwNCiAiaXNzIjogImh0dHBzOi8vcHJveHkuYXBpLnByZWJhbmNvLmNvbS5ici9hdXRoL3NlcnZlci92MS4xL3Rva2VuIiwNCiAiYXVkIjogImh0dHBzOi8vcHJveHkuYXBpLnByZWJhbmNvLmNvbS5icjo4NDQzIiwNCiAiaWF0IjogMTYxMjQ2NTk1MSwNCiAiZXhwIjogMTYxMjU1MjMyNywNCiAic2NwIjogIkJvbGV0byIsDQogImp0aSI6ICJtb2NrU2Vzc2lvbi0xNDY2Njg2NDA3NjgxMTgwMzc4NTgyMDI0NTU2OTU3NTIyNDA1MjkiLA0KICJ0b2tlblR5cGUiOiAiYWNjZXNzIiwNCiAiY2xpZW50VHlwZSI6ICJzZXJ2ZXIiLA0KICJvd25lclR5cGUiIDogInNlcnZlciIsDQogImF1dGhEYXRhIjogImV5SjBlWEFpT2lKS1YxUWlMQ0pqZEhraU9pSktWMVFpTENKaGJHY2lPaUpTVTBFdFQwRkZVQ0lzSW1WdVl5STZJa0V5TlRaRFFrTXRTRk0xTVRJaWZRLmU1aFJCd1lKMGdGQlVqU21sSmdwb19nMnU3dk9EdzRmT1U0elZlMUE5aUVqaXhHMG5KMVBibHkzWGZTS3MtazJvNS1hNjVSSG9wTlVKcGlxejU1cUc3UWN0b1NiRU1ubkNyRDU3NldOUFhOMXJaNWFfVlpORTY3VlJoaVIxOE53bjNGZnBkRG0teTM1N05rS1hOVlRIWmJMV2l3eE10ZURxLXdIQmNQUXhlNHNXX2MxZl91OENVWU5HNXlteE5iNmIxWWdXS2hJQjNKeUtiU1pfZFdRWkpxX0pKTDdBNkx5YjBUWFlUcWhEVHVnYzNTRHZEYU9Cb0xoVW5OM2hCaVdlRnNCTEw1U3BHQnBRNzNJQzJrMTQ2TUpaTmVUOXJDcVRKMENaTGVFTHhsOW9US3N0dUZzU1VmWkZCbVRQU281c3EyZnVNQnZSQVRwb3BUcHRDYlFleWJORUpvVGNKLTgtRkdDeTNiSWw1M2ZFUHJLb3NCQ2xKa2YydXY5dVg3cFhKaXJEVWl5elU0UlhOWE1TQmRRVmtTTkNHUTF6SVAtYlFuNUptbjNQa0JfTFowbk1PZXdpYWVPOG9DYjBpd2I1YjhCejB4b2hIY0pfeXpNNHl2NW5adzJsUnhRakxpMGowM0ptamNlQkVtUDJNWWdoOEdDTm8wRTMyNzFyTXYyd3pnT215akExcVl0X045LVBGeGJjLW5zTVo3MDUzS3Z0UTJ5OThIUHBjYzZnNmFxYS04S2xUN2V4LUNGWDNnRUgyR2FhajNnYjVLUUFBTFQwTnI3WHBrRWo4cks5ZjBEY1hJSDlIRG1zR2ZweDF3bWFmRHYxZ3JBd3l6TTdYSU1YQzBDRXotTWdxOEduLW12YmloV0doS202NVRnR1lLZi1uTjlKZF9QeGdJLkcyQ1JHTDh0YzN6SERwUzNrbGZyTncuU0thaHlkOWRpeHV6QUh1QkVVRkdfdGJWTzhKU0k5ajM3SVdZU0NmU2ZITzJCcTFIeEJsNjhBNDJTOUtrbDZNYk00cHZkUXhqQnJSWVNWLUZ5Q3J4YWJVZlVwMWFqMmJTNDBwbmRZUFlYenNMYXlIemxlNWpfNmQxM1g5c3IxdHVzZXZrTDYzT0RwSGhHRW1WWFJBZWE2ckZoMDRnSDYtV2FtbXIwUGRaN2puaGxXUzdZVk4xRGdHYWlSbTJSUzcyVzdGSlpxOUpEY25Id1RSRF9ERGwtT0paWWNrZml3VVhpdC1vTkJCMDJxSEJIcVJpcGNXdUhQenR2ZC1EdG1Md1pXNDFpcWxDcm56YUExRjNOTV9rRXFqQk0zM2RRVWRIbGE4STJrVk05aEpkak9CaHd2bG13TWR0djFkWWRZV1RUWWtDN0I0bnFvQjFWbzA1OHJ2SzREMWdSSFU0NGVGTGEtY1F4QzE2bjJZU0MzS3BvajBQVkhhUVNadUVldWJXU3V0TEt6MHNTWmFLOVVJNi0tUGpkeVF2TkZ6YjBNNi11bksxUjRiY3VoT3VEOTN6LXNNTFp0anJIU1lXdmlSR2FGU3Vhc0I4SWVrMjFtUmVJaFlMaXprOU55SnppNGNXWGhkZHdhbUlZaEdUcmMwNTlheGtuN04xUWtROEZOU2FGWnFvbjRWUVhkbXhrNVgyTVhaRVhjRWpHbmx4aWZFZ29tYzdBeUgzUFN2NG5nOVhtMkM5akJUaVJ5TGlMMks3RTZTa3ZsS2dQcjRDaExlbjY3MlQ3SzNVOTJJY1lhai0yVUJoTlBST2EybnNDT2NqMkJFeGlvT1BRd0U1b25ENDVXZ2k2S1gyUkRmYlJzZmFvV213MjNvRWkxa2VnbXM0T012NF9KdER0b3ZKeGRjZEtDS3ZpQmJTaExpSmM0dl9vdWRsN2Y0NzYwYi1UcWRyWmpXZXdYbDdEdjJQQ29oNGluUVV0VFJ3Qy15ZmgybUo0OVVaLVNpQzRiOHBYcVhFSVljZUJJUVhIaHNoT0ZiUnY4N2xZekdmc3hIR1M4SGczcGZFdWtTakwtUXFZcWItazVPbnV2YTdjWjRnU3JfaUxRR3daQXE0YXRGREQtQnkwQmlOaDV0NEllLU8wTElUOVZlYnZ5WERLR2xFQmRsN3RzdGZRTGFGWVhhR0tQRllYQjIxcE5NYlhkT193cVpNWEtoTDlZa1N3S21HdjF0Y0JBZTk4aFdLWTY3YlM3bDAxLUtlSDFNdEdqaGNSQXZpSGFnbGRpQlY4SzVMLXd1Z1JxaHVtazltZ3M5MGx1TGlBLTBLUldOQkEyT19TUUZGMmQ0MTgxY0RXSWRxQzg5Q3BaTVI4TnhtQzdXTzNkSmJBMDFZUnhLNXRJdl96TEVOZlZGbExkRnJUTjBsZU5HTFBQZi15OHkwUElOTHdFZ3ZpTWpYdzdQUnA1Q19CRFJUZ0pSYmljQW5RdUoyOGhFdTFqci05VElxM3IzM1ZEeU11NDNSZWVlQlRlMnBxUS10VGRWUFk0U2lNTmdsOGd4QjlEWVF3S1M1cnhENUNObzVna1FDYjdhU0JGaUJZcW12MXRHUzlURDBOR21lRE9hWGtwU1d0RUx1anhkcGVQZVRabE1NVnRyeTRfVEtMQ2J6MDVyd1FpXzBNVUh2Y1VRT2lIaG1vRGhzTjVkT2J3ZHN2aUpya0k0YmpMQnBHeHF4aDc3c2k5TV9NNktxNnRvcWMzelI1RTlNSl95UFd2blR5MVNxbXkwU0ZxZGFwTm9mTTVJRm10ZWlxRGhxMm9lSTJSNzRLQlppOVRTRDRDUFF5bW01dmRjQ0FnVi1BQlFXNlJuS0taZm5hR2lieVd3c25taS1nT0hWSU82TUYxUDN5bVRpWi01T2Z1eE8wOW9LbHNBWDRiVXUzQ2M3UVBYWkxzVnM2Tl9DYl9MSTlDd18uSGtmeUlhYlRjdVVNY01FUzhkVlJzWmNwa1hTS1VRTXN6dUp6NzNMaHFuTSINCn0.N7y1NPiCOKzHubQFGvf-Aht7_X2y_7ZJ68oQFgFAWz_j1bt4UbYMOCRU5Z78Vz7cuoR6ctrMlegNgTxdX69GP97yUr64JvvcUxipHkWEYwnlhb8zs0S60s8b4Z6WipyOFpC-aI9_HkvboXtCZ0Ac2otpeFytMj2rlUqDQBEfiCq4Jg8P33iWcW2Ohy1imkDFAA3-5Swec1VF3CCyHGGaCOiVEQVigkDO4rsfDtucxGyKFyggNljh4EKbfE9lVEVqPV1pl5QtD7CRbB5yBs1D1EQBD_7hG0vrTWVmamI0Ws5nQplLlkTDNTp29R9N4OPG_dOpqiWMZBnhRcUOXJplc8CQtq5ffOlyHU9oRhXu_ue3cwUk-ZYkGmI-YcU6JGHnlNLrwJfwf6fgWVSKiPA3p9byqOv8uyK5CwjDs1DPn6g6eLyD5TTBEey9sR0KuDBCAYxeaX4vAxTpOAp-XUQvv2A9v8UHx1ApoS9IJsLfMipd6tJPvrt4FJYHptQbNlcvLx4_v7oHQVaBWuGK_4WGaGKGPSPfkpPF5A2sDGOyoOcbPi-LewD-7Yz8SvqdAOjkkQCKNOCkPzJ6fII5J--dxBSeVTRXJKqjVFa91nmjkqdnJlNCt9uXBwA04n7uYZ35KWj1qINDGt9kPBlVIcTCRlIy8-Grfbe7hsDraTdXc8Q');
        $this->signature->setTimestamp(Carbon::now()->toDateTimeLocalString());
        $this->signature->setNonce(Carbon::now()->timestamp);
    }

    public function getClient()
    {
        $this->assertInstanceOf(Client::class, $this->service->getClient());
    }

    public function testAccessToken()
    {
        $jwt = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiJodHRwczpcL1wvcHJveHkuYXBpLnByZWJhbmNvLmNvbS5iclwvYXV0aFwvc2VydmVyXC92MS4xXC90b2tlbiIsInN1YiI6IjI1MTQ2OWQ2LTBmN2YtNGU1Yy1hY2UwLWNkYWZkMjU1YmU0ZiIsImlhdCI6IjE2MTI5ODQ5NzQiLCJleHAiOiIxNjEzMDcxMzc0IiwianRpIjoiMTYxMjk4NDk3NCIsInZlciI6IjEuMSJ9.OovSNn0U25TPB3o1XxJjV-o-5C1KFiqdpf93Cni92NjtEUWdQJh3gMoIpr-SwbLOJuuGqEkkBC1pdDm1sxOCOR6spja6WYMVU4O-zuzv5ZlQBvjSWdujg4L_fpIbUAEFMOIHyoGxapX5u-X3e7kZSKBb8vlscaDiPODJpBehGBJ-UWi5g9KShZLiIYww0FnTXLMjsUvzWp9Ud6ZG3rfC-Rd4t88zk40-6ENv0HcLQLjMD4uxJA37kzG2mgXMUaQoxYIq5YtYmrZuUIjVgmWiWeo72fMYBZI0j0n15lV-Jn2CdQm372u9dK9krClIjA7ZovYkazuaHnojNdd5heKZsw';
        $expected_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.ew0KICJ2ZXIiOiAiMS4wIiwNCiAiaXNzIjogImh0dHBzOi8vcHJveHkuYXBpLnByZWJhbmNvLmNvbS5ici9hdXRoL3NlcnZlci92MS4xL3Rva2VuIiwNCiAiYXVkIjogImh0dHBzOi8vcHJveHkuYXBpLnByZWJhbmNvLmNvbS5icjo4NDQzIiwNCiAiaWF0IjogMTYxMjk4NDk5NSwNCiAiZXhwIjogMTYxMzA3MTM3NCwNCiAic2NwIjogIkJvbGV0byIsDQogImp0aSI6ICJtb2NrU2Vzc2lvbi0xODI5NDA0NTU0Mjc4NTk4NDM2MTE3NDEwNTI5MzU0Mjg2NTQ0OCIsDQogInRva2VuVHlwZSI6ICJhY2Nlc3MiLA0KICJjbGllbnRUeXBlIjogInNlcnZlciIsDQogIm93bmVyVHlwZSIgOiAic2VydmVyIiwNCiAiYXV0aERhdGEiOiAiZXlKMGVYQWlPaUpLVjFRaUxDSmpkSGtpT2lKS1YxUWlMQ0poYkdjaU9pSlNVMEV0VDBGRlVDSXNJbVZ1WXlJNklrRXlOVFpEUWtNdFNGTTFNVElpZlEuQmFDdm5VVmF6VWk1TnlSczB6d094YTZqYjZvZUdFRzZmV3NYWW5xQ0s5ZUhqZU9ic3IxU2pjT0t4NXRYMUxwY3FGYjY2WTVpTUZXMjdDenpoUDFISmZHcVZ5MU5pcDdOemdBNmp1Z0hTbU83R2hmU2NEcE5OQnJHNmYzLWktQkJ2YmJNOVhPeEp6NjJnNnA1b1dVVDNvNGdiemgzbUlLVk9BOHdSY0trWkF5R3ZqaGhCeFlYWTJQVnRCNEUtNXNIcVpzVzRFYnJHcFo1a0Y5Tmgwck40T0VoUV9Pc29GdWtlbDRQZDA3YXNocWJRZzlqaUI2eG51N2N1T2lqMEZhTjUwcm9CSUNJQVV5OGg0dGVWYmVRaUhtWlZuSHN6RDhYQTB6VU1WQWhobmk2aU5aS3VkaXJuSEE3WnhRZ1JWcHBnVGwzVU5fZWdZTEpBMS1nS183Q1F4LVJIdTk5eDZROXRJaGFFUVMxSmFfSHF0czNSbS1UQ3FXS1ozU2VHckFpcThabWV6TUVwZExrNkNHZ0lqUlBsQWp4aE5lZWVvZFAtMlRnZ2ZFLW56MngwblVsclBGR3loR1FPS0hPZGd2VWEwdGVMMjdzYzJqWlUxc1VrYVFPb2tGcVEwMGJMb0RpdVZFZHJzekJNVjRfYkczQ2d5Sk1wM1ctY2RFR24yRnJWcjJkVnZ5dHg1OUprRXBBVW9TTkp4bm1yZjJSSmpCQmdXcWozcGpjX3BJMGZpY3JmZlBoaXRlaG94NTd0Q2l2dUFFeUlTTFNSMVFSMVB5WWlRVlhUV202Z0pfZkdHMnBVaXBsM3dxWGxINzRBc0haTWxpRE1TY0RNbU9hejhLaG1xMkxtMS1ZNGpoOFhDQ3AzRjgwUG1ncTcyOGtiSXU1X0VIVi02RkJNLUUuNUxkYnhmTGw2QzhvOWEtMURJbXNVdy5HTGNyOEFYc1VxTEdMYlVKQ1RSQlNaNlJqWmxuNkJLOHA0dEc5cnFEZGJTME5QUHl2QThuNU5VbXF5ck9qNkItUFpVN0VDalY0TlhQRzFubDI4RnlKUDhKRklCX1V1NnZrR0pzUTdzZjBSOFlRZEtmcE9VNDhSVDJ6blYxdnItaDdZRm1IWEhmQjFoZTJOOF9DS2FvenNyYk9BOVRCQU5naS1GNXlYTTgxMkpKckEwNjd3a1JTZGJkSG9MTlZoS3p0dDA0QTVFRE15R0N0S3M4Z09zLS1sa0lrc2hNb0d5dTNlaUVyQWZZTUQxaG5mNUpPRVA5cjZUTURhZjdBOGdULUp2QjJTazh1dEVPXzZwdXQ2dXdraDJJNDdZY1ZRTFFBZU1CMldQdmRHMjVBMFVneHNXQ0JFMUxrX0k2Z0NSbGN5Z0pfellWTDByOWItUDZsSW9md0pKQ0hvT3Ryc19ORVpzSVVKTVVPdE1YVm4tT3VaZWRWV3hmZldzZGU4alhGS0lTcEx0WFlHbzZELTZ4N25ieHlEaGJiUms4NjAtelNpelJLMUVwSHZYd0owYzJ4clhWd3lwY2k3aVlrcll0cENHeHFBR1hhSmptUFFCNi1uT1N3cUdITldYXzhDV1VGZ2R3OGo3ckNzTjZvblo4R09tbWNsTTlRSm1pTjZ4bG80UXdsQS04WE1IZUlZcWk0RkZnRDdqQ1RIMkRhQTdCS19SQXFHWEEtNDZiYTc4U0pxNWtBVEMxMGpycm1tT2dlcVA1YUdWZHBob2w1amRMUDRUbWdxQUxzd3J3bGVUc1NaY0l5bUhFVzY2X2NKT1FyeG9BR2tnVmlWbGlPQ0Jjb2pMZ1cxWHNxQTlpcnJ4aXpoMVB0eGdSeHBELWlWQTNXYzBBZ0Qzb0F1blBTY1RRRzlNenIxc3hVU3A4Z1hTSGZDRkhBMlhnYUh0RHB5d3JoaVpfLWktTTloUlFUM0lRTkhic0FLWkJXS1UtanFWSkJBU1A2eVJsOFJqYTM2Z0dtWmZwZVpMbm1sQW1mcnRQN1k3dEQxNHI1azJTYzExb1g4bnZhVkFycTYxQ0FqRmNnbHUwcHhIdGt0QnFnc0V4UERTZmFLNUVmSVhtenpseGRYbTVBdmhaTUF4Z05Na2F0X1EyRkEyeXlJbTFzVy1TWUo2aWZGNURtNm85OUNYNVc0YUpnaFRwSU8xamhqMklSaVhyZHVaUkt5bEpncmtjUFJaZGdYZEswNjM3bFJIMnhWTVhpYnFlNDZxQXpxdlZwbFhfUlg5cnFiQTctRDZQN2wyV1VZTnpESnNldS1Ddnl4R0l5dVpDODNWa1dINHhCdkFUV1VrT0Y2LWlnN0J5N1JKdmZPSUxyM2JvUHEyUk9LenZ4bHN5LUdCTDVkdXRGN21PSmtBY29sSGhKN3U4NzJ0XzNqWlRKdGJBMzFDbFdPNnZjZGh6c251enRPX3BKMHBzcHY5ZTdqaVhZSWp3cnA2Y2dWcGpDQmx2OEZHYmt6SUxlUk1RUG1Qd2Vjb1ltSkpJOWhfcUxPN1RlU3hacENVNXhPY2NDX0UzSHFwREZuWmtwVnlkXy1TaVpWQng1VEFvTm56UGtwNW42Rno1NzZRdGpIVUp0TXdFNmJhX3p0SHAxcDZyN0NWNkZnM0EyOWRjYW9aRk12M1BoZjJ0akhzb3pqQUdvVGFmcFRGNFRGRmg3d2xsVmNONTM3R0dpM2RjYlR6aWdQTUx6N0RXeTRhbXB1aGVWUmJxOEo5ZnE0MUFKLWhSZlRhUENwZUFFMjA0MmdMYmRmRzJ6S0JONGM1TEt0SElaNjV5QVVQRGlDaE1iU0VhVlBxOFFZYzk0UDI1MnJSY2xoOEE4SmpNTDZXUXlfU0dEWmR0eE1Ed3FiMTVZZ0YtUEt2UHhzVEhDV3AwRlJfZEFxeFNGZEppeE5WN1REQ2hpd1RWdm5zYi5BRzBLbDlmLUtqQXZjd0hxNlFyUy1TZGQtYXBvdFQ4Sml6TGZEMHo1NEswIg0KfQ.aA3Gsnj3K3mGh54j68b-tMqb2IHXaA7wdslSE4kQoQ2bSGpte-rtMcAF9qZ3n07G6Sb87PDNISggyUs39lHF2rY8hSM42BKrq96XiQEnjYeYu_VwHLFQ1sroyxdl4zy6O19BJlaeGa910oOkPQ3XEFmrLaAvbRWWRUWVkk-gSwDo8JBMl_F2xaTkxzLjdor1SnmjkPwqlenAJcTDAzMdJsXIQXQfhS2soVXrgBOUgEFwOM0_GZja925xZQnaoB776qBUDUQnGuouFmHes_mpZj28UwvWCgfXJSNzjioRd3cmYbZkHAPx4RFWs94P7VNNkW6F1AIEDORgeLPhCseU9lnhAPsQdn-1Ge2tF2fkLEmVOHbQFB6jnnncYoGocmUpjENXKI8TJViBy61ABFf6VUZrckWGLe-4qxTKhMZKujEsUIDITG46cl5WI7HT5-si4YV8CZBg9c_W5AmAgzzL97UCfdweqPFFU27KFkh5sqW5LrZ8FuF5BQq5ek-RiZr6N4-BCSXa-00q_DjDpZXYmjQjd2IF-5YtxVSfbtgCtcM00CTbvR7lzff46837sjl-PdhnAMWlAJtV--hHRGr7ex40Dqj-hq32NVMy6QhJu6M1rC3v1i4S9WLEvCrGceQz3JCQhW2oMRhaFhYy-pY6AuxTpOukyb5EcGzm5BK1CbI";
        $this->guzzler->expects($this->once())->post('/auth/server/v1.1/token')
            ->willRespond(
                new Response(201,[],
                    json_encode(['access_token' => $expected_token, 'token_type' => 'Bearer', 'expires_in' => 86375]),
                )
            );
        $access_token = $this->service->accessToken($jwt);
        $this->assertIsString($access_token);
        $this->assertEquals($expected_token, $access_token);
    }

    public function testAuthorization()
    {
        $signature = SignatureService::bradRequestSignature($this->signature, __DIR__.'/private.key.pem', '1235');
        $this->signature->setBradSignature($signature);
        $this->guzzler->expects($this->once())->post('/v1.1/jwt-service')
            ->willRespond(
                new Response(200, [],
                'API acessado com sucesso!'
                )
            );
        $response = $this->service->authorize($this->signature);
        $this->assertIsString($response);
        $this->assertEquals('API acessado com sucesso!',$response);
    }

}
